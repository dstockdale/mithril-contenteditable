{"code":"import * as tslib_1 from \"tslib\";\r\nimport m from 'mithril';\r\n/**\r\n * A simple component for an HTML element with editable contents.\r\n * Loosely inspired by react-contenteditable and Tania Rascia's content-editable tutorial.\r\n * @see https://github.com/lovasoa/react-contenteditable\r\n * @see https://www.taniarascia.com/content-editable-elements-in-javascript-react/\r\n */\r\nexport var ContentEditable = function () {\r\n    var state = {};\r\n    /** Emit the change to the user. */\r\n    var emitChange = function (originalEvt, cleanupHtml) {\r\n        if (cleanupHtml === void 0) { cleanupHtml = false; }\r\n        var dom = state.dom, onchange = state.onchange, lastHtml = state.lastHtml;\r\n        var html = cleanupHtml ? trimSpaces(dom.innerHTML) : dom.innerHTML;\r\n        if (onchange && html !== lastHtml) {\r\n            // Clone event with Object.assign to avoid\r\n            // \"Cannot assign to read only property 'target' of object\"\r\n            var evt = Object.assign({}, originalEvt, {\r\n                target: {\r\n                    value: html,\r\n                },\r\n            });\r\n            onchange(html, evt);\r\n        }\r\n        state.lastHtml = html;\r\n    };\r\n    /** Remove all HTML content when pasting, and retain only the plain text. */\r\n    var pastePlainText = function (event) {\r\n        event.preventDefault();\r\n        var text = event.clipboardData && event.clipboardData.getData('text/plain');\r\n        document.execCommand('insertHTML', false, text || '');\r\n    };\r\n    /** Clean up HTML content */\r\n    var trimSpaces = function (s) {\r\n        return s\r\n            .replace(/&nbsp;/g, '')\r\n            .replace(/&amp;/g, '&')\r\n            .replace(/&gt;/g, '>')\r\n            .replace(/&lt;/g, '<');\r\n    };\r\n    /** Disable entering a new line */\r\n    var disableNewlines = function (event) {\r\n        var keyCode = event.keyCode || event.which;\r\n        if (keyCode === 13) {\r\n            event.returnValue = false;\r\n            if (event.preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n    var selectAll = function () {\r\n        setTimeout(function () {\r\n            document.execCommand('selectAll', false);\r\n        }, 0);\r\n    };\r\n    return {\r\n        oncreate: function (_a) {\r\n            var dom = _a.dom, onchange = _a.attrs.onchange;\r\n            state.onchange = onchange;\r\n            state.dom = dom;\r\n        },\r\n        view: function (_a) {\r\n            var _b = _a.attrs, html = _b.html, _c = _b.tagName, tagName = _c === void 0 ? 'div' : _c, _d = _b.disabled, disabled = _d === void 0 ? false : _d, _e = _b.pasteAsPlainText, pasteAsPlainText = _e === void 0 ? true : _e, _f = _b.cleanupHtml, cleanupHtml = _f === void 0 ? true : _f, _g = _b.preventNewline, preventNewline = _g === void 0 ? true : _g, _h = _b.selectAllOnFocus, selectAllOnFocus = _h === void 0 ? true : _h, onchange = _b.onchange, props = tslib_1.__rest(_b, [\"html\", \"tagName\", \"disabled\", \"pasteAsPlainText\", \"cleanupHtml\", \"preventNewline\", \"selectAllOnFocus\", \"onchange\"]);\r\n            return m(tagName, tslib_1.__assign({}, props, { contenteditable: !disabled, onfocus: selectAllOnFocus ? selectAll : undefined, oninput: emitChange, onblur: function (e) { return emitChange(e, cleanupHtml); }, onpaste: pasteAsPlainText ? pastePlainText : undefined, onkeypress: preventNewline ? disableNewlines : undefined }), m.trust(html));\r\n        },\r\n    };\r\n};\r\n//# sourceMappingURL=content-editable.js.map","references":["C:/dev/web/mithril-contenteditable/packages/lib/node_modules/.registry.npmjs.org/@types/mithril/1.1.16/node_modules/@types/mithril/index.d.ts"],"map":"{\"version\":3,\"file\":\"content-editable.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/content-editable.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/dev/web/mithril-contenteditable/packages/lib/content-editable.d.ts","writeByteOrderMark":false,"text":"import { FactoryComponent, Attributes } from 'mithril';\r\nexport interface IContentEditable extends Attributes {\r\n    /** Required HTML input that must be rendered */\r\n    html: string;\r\n    /**\r\n     * Optional custom HTML tag.\r\n     * @default div\r\n     */\r\n    tagName?: string;\r\n    /**\r\n     * If disabled is true, editing is disabled.\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * If true, remove all HTML content when pasting text and only retain the text.\r\n     * @default true\r\n     */\r\n    pasteAsPlainText?: boolean;\r\n    /**\r\n     * If true, replace special HTML characters by their plain equivalent,\r\n     * e.g. the non-breaking space `&nbsp;`, `&amp;`, `&gt;`, and `&lt;`.\r\n     * Is only applied when the element looses focus (otherwise, the cursor\r\n     * position may get lost).\r\n     * @default true\r\n     */\r\n    cleanupHtml?: boolean;\r\n    /**\r\n     * If true, prevent a newline to be entered.\r\n     * @default true\r\n     */\r\n    preventNewline?: boolean;\r\n    /**\r\n     * If true, select the whole cell on focus.\r\n     * @default true\r\n     */\r\n    selectAllOnFocus?: boolean;\r\n    /** Handle the change event, returns the HTML and the original event */\r\n    onchange?: (html: string, evt?: Event) => void;\r\n    /** Handle the keydown event when the user presses a key. */\r\n    onkeydown?: (e: KeyboardEvent) => void;\r\n}\r\n/**\r\n * A simple component for an HTML element with editable contents.\r\n * Loosely inspired by react-contenteditable and Tania Rascia's content-editable tutorial.\r\n * @see https://github.com/lovasoa/react-contenteditable\r\n * @see https://www.taniarascia.com/content-editable-elements-in-javascript-react/\r\n */\r\nexport declare const ContentEditable: FactoryComponent<IContentEditable>;\r\n"}}
